AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating an EC2 instance with user data, key pair, security group, Rekognition collection, DynamoDB table, S3 bucket with KMS SSE policy, lifecycle policy, and an IAM role attached to a Lambda function

Resources:
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH, HTTPS, and TCP 8080 from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Allow HTTPS from anywhere
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0  # Allow custom TCP for port 8080 from anywhere

  MyRekognitionCollection:
    Type: 'AWS::Rekognition::Collection'
    Properties:
      CollectionId: testCollection  # Replace with your desired collection ID

  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: testTable  # Replace with your desired table name
      AttributeDefinitions:
        - AttributeName: RekognitionId
          AttributeType: S
      KeySchema:
        - AttributeName: RekognitionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-051f8a213df8bc089 # Amazon Linux 2 AMI
      KeyName: winwinphyo  
      SecurityGroups:
        - !Ref MySecurityGroup
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y python3 python3-pip
          sudo yum install -y libglvnd-devel
          sudo pip3 install flask opencv-python boto3 Pillow
          sudo yum install -y git
      Tags:
      - Key: Name
        Value: kaung-test-instance

  MyS3BucketEvent:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'kaunghtetcho-test-bucket' # Reference the existing bucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt MyLambdaFunction.Arn

  TestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: testRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: TestRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::kaunghtetcho-test-bucket/*'
              - Effect: Allow
                Action: 'dynamodb:PutItem'
                Resource: 'arn:aws:dynamodb:us-east-1:339713158809:table/testTable'
              - Effect: Allow
                Action: 'rekognition:IndexFaces'
                Resource: '*'

  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function

          import boto3
          from decimal import Decimal
          import json
          import urllib

          dynamodb = boto3.client('dynamodb')
          s3 = boto3.client('s3')
          rekognition = boto3.client('rekognition')

          def index_faces(bucket, key):
              response = rekognition.index_faces(
                  Image={"S3Object": {"Bucket": bucket, "Name": key}},
                  CollectionId="testCollection"
              )
              return response

          def update_index(tableName, faceId, fullName):
              response = dynamodb.put_item(
                  TableName=testTable,
                  Item={'RekognitionId': {'S': faceId}, 'FullName': {'S': fullName}}
              )
              
          def lambda_handler(event, context):
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              try:
                  response = index_faces(bucket, key)
                  if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                      faceId
      Role: !GetAtt TestRole.Arn
      Runtime: python3.11
      Handler: index.lambda_handler
