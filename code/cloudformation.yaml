AWSTemplateFormatVersion: '2010-09-09'
Resources:

  TestSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH, HTTPS, and TCP 8080 from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Allow SSH from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Allow HTTPS from anywhere
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0  # Allow custom TCP for port 8080 from anywhere

  TestEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-051f8a213df8bc089  
      KeyName: winwinphyo  
      SecurityGroups:
        - !Ref TestSecurityGroup
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y python3 python3-pip
          sudo yum install -y libglvnd-devel
          sudo pip3 install flask opencv-python boto3 Pillow
          sudo yum install -y git
      Tags:
      - Key: Name
        Value: kaung-test-instance

  TestBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: kaunghtetcho-test-bucket
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt TestFunction.Arn
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: 'e7c683e9-626e-4306-9a01-23ccf3230b9b'  
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldImages
            Status: Enabled
            Prefix: expired/
            ExpirationInDays: 30

  TestCollection:
    Type: AWS::Rekognition::Collection
    Properties:
      CollectionId: testCollection

  TestTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: testTable
      AttributeDefinitions:
        - AttributeName: RekognitionId
          AttributeType: S
      KeySchema:
        - AttributeName: RekognitionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  TestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TestPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::kaunghtetcho-test-bucket/*

              - Effect: Allow
                Action: kms:Decrypt
                Resource: "arn:aws:kms:us-east-1:339713158809:key/e7c683e9-626e-4306-9a01-23ccf3230b9b" 

              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/testTable"
              - Effect: Allow
                Action: rekognition:IndexFaces
                Resource: "*"

  TestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function

          import boto3
          from decimal import Decimal
          import json
          import urllib

          print('Loading function')

          dynamodb = boto3.client('dynamodb')
          s3 = boto3.client('s3')
          rekognition = boto3.client('rekognition')


          # --------------- Helper Functions ------------------

          def index_faces(bucket, key):

              response = rekognition.index_faces(
                  Image={"S3Object":
                      {"Bucket": bucket,
                      "Name": key}},
                      CollectionId="testCollection")
              return response

          def update_index(tableName,faceId, fullName):
              response = dynamodb.put_item(
                  TableName=tableName,
                  Item={
                      'RekognitionId': {'S': faceId},
                      'FullName': {'S': fullName}
                      }
                  ) 

          # --------------- Main handler ------------------

          def lambda_handler(event, context):

              # Get the object from the event
              bucket = event['Records'][0]['s3']['bucket']['name']
              print("Records: ",event['Records'])
              key = event['Records'][0]['s3']['object']['key']
              print("Key: ",key)
              # key = key.encode()
              # key = urllib.parse.unquote_plus(key)

              try:

                  # Calls Amazon Rekognition IndexFaces API to detect faces in S3 object 
                  # to index faces into specified collection

                  response = index_faces(bucket, key)

                  # Commit faceId and full name object metadata to DynamoDB

                  if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                      faceId = response['FaceRecords'][0]['Face']['FaceId']

                      ret = s3.head_object(Bucket=bucket,Key=key)
                      personFullName = ret['Metadata']['fullname']

                      update_index('testTable',faceId,personFullName)

                  # Print response to console
                  print(response)

                  return response
              except Exception as e:
                  print(e)
                  print("Error processing object {} from bucket {}. ".format(key, bucket))
                  raise e
      Handler: index.lambda_handler
      Role: !GetAtt TestRole.Arn
      Runtime: python3.8
      Timeout: 30

  TestBucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TestFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::kaunghtetcho-test-bucket"
